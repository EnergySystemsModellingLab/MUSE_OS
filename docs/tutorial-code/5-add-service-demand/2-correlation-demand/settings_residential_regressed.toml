# Global settings - most REQUIRED
time_framework = [ 2020, 2025, 2030, 2035]
foresight = 5   # Has to be a multiple of the minimum separation between the years in time framework
regions = ["R1"]
interest_rate = 0.1
interpolation_mode = 'Active'
log_level = 'info'
excluded_commodities = ["solar", "wind", "electricity", "gas"]

# Convergence parameters
equilibrium = false
equilibrium_variable = 'demand'
maximum_iterations = 100
tolerance = 0.1
tolerance_unmet_demand = -0.1

# Carbon budget control
[carbon_budget_control]
budget = []         

[[outputs]]
quantity = "prices"
sink = "aggregate"
filename = "{path}/{default_output_dir}/MCA{Quantity}.csv"

[[outputs]]
quantity = "capacity"
sink = "aggregate"
filename = "{cwd}/{default_output_dir}/MCA{Quantity}.csv"
index = false
keep_columns = [
    'technology',
    'dst_region',
    'region',
    'agent',
    'sector',
    'type',
    'year',
    'capacity',
]

[[outputs]]
quantity = "timeslice_supply"
sink = "aggregate"
filename = "{cwd}/{default_output_dir}/MCA{Quantity}.csv"
index = false
keep_columns = [
    'technology',
    'dst_region',
    'region',
    'commodity',
    'agent',
    'sector',
    'category',
    'year',
    'supply',
]

# Global input files contain data that are NOT sector specific - DEFAULTS ALL
# All paths and filenames will have a default value (those indicated below) so only need to be included
# if any of those names are different. This whole section is optional.
[global_input_files]
path = '{path}/input'
projections = '{path}/Projections.csv'
global_commodities = '{path}/GlobalCommodities.csv'
base_year_export = "{path}/BaseYearExport.csv"
base_year_import = "{path}/BaseYearImport.csv"
#regression_parameters = '{muse_sectors}/regressionparameters.csv'


# Definition of the sector-specific options -  REQUIRED at least one
# All paths and filenames will have a default value for each sector (those indicated below) so only need to be included
# if any of those names are different.
# As the number os sectors included in MUSE grow, it will be necessary to add another [sectors.whatever] section with the
# corresponding information.
[sectors.residential]
type = 'default'
priority = 'demand'

path = '{path}/technodata'
technodata = '{path}/residential/Technodata.csv'
commodities_in = '{path}/residential/CommIN.csv'
commodities_out = '{path}/residential/CommOUT.csv'


[sectors.residential.subsectors.retro_and_new]
agents = '{path}/Agents.csv'
existing_capacity = '{path}/residential/ExistingCapacity.csv'
lpsolver = "scipy" # Optional, defaults to "adhoc" 
constraints = [ # Optional, defaults to the constraints below
    "max_production",
    "max_capacity_expansion",
    "demand",
    "search_space",
]
demand_share = "new_and_retro" # Optional, default to new_and_retro
forecast = 5 # Optional, defaults to 5 

[[sectors.residential.interactions]] 
net = 'new_to_retro'
interaction = 'transfer'

[[sectors.residential.outputs]]
filename = '{cwd}/{default_output_dir}/{Sector}/{Quantity}/{year}{suffix}'
quantity = "capacity"
sink = 'csv'
overwrite = true

[[sectors.residential.interactions]] 
net = 'new_to_retro'
interaction = 'transfer'


[sectors.power]
type = 'default'
priority = 2
dispatch_production = 'share'

technodata = '{path}/technodata/power/Technodata.csv'
commodities_in = '{path}/technodata/power/CommIn.csv'
commodities_out = '{path}/technodata/power/CommOut.csv'

[sectors.power.subsectors.retro_and_new]
agents = '{path}/technodata/Agents.csv'
existing_capacity = '{path}/technodata/power/ExistingCapacity.csv'
lpsolver = "scipy"

[[sectors.power.outputs]]
filename = '{cwd}/{default_output_dir}/{Sector}/{Quantity}/{year}{suffix}'
quantity = "capacity"
sink = 'csv'
overwrite = true

[[sectors.power.interactions]] 
net = 'new_to_retro'
interaction = 'transfer'


[sectors.gas]
type = 'default'
priority = 3
dispatch_production = 'share'

technodata = '{path}/technodata/gas/Technodata.csv'
commodities_in = '{path}/technodata/gas/CommIn.csv'
commodities_out = '{path}/technodata/gas/CommOut.csv'

[sectors.gas.subsectors.retro_and_new]
agents = '{path}/technodata/Agents.csv'
existing_capacity = '{path}/technodata/gas/ExistingCapacity.csv'
lpsolver = "scipy"

[[sectors.gas.outputs]]
filename = '{cwd}/{default_output_dir}/{Sector}/{Quantity}/{year}{suffix}'
quantity = "capacity"
sink = 'csv'
overwrite = true

[[sectors.gas.interactions]] 
net = 'new_to_retro'
interaction = 'transfer'
[sectors.presets]
type = 'presets'
priority = 0
path = '{path}/technodata/preset'
timeslice_shares_path = '{path}/TimesliceSharepreset.csv'
macrodrivers_path = '{path}/Macrodrivers.csv'
regression_path = '{path}/regressionparameters.csv'
forecast = 0
filters = {sector="residential", region=["R1"]}


[timeslices]
all-year.all-week.night = 1095
all-year.all-week.morning = 1095
all-year.all-week.mid-afternoon = 1095
all-year.all-week.early-peak = 1095
all-year.all-week.late-peak = 1095
all-year.all-week.evening = 1095
all-year.all-week.early-morning = 1095
all-year.all-week.late-afternoon = 1095
level_names = ["month", "day", "hour"]






