name: Publishing

on:
  release:
    types: [published]

jobs:
  test:
    uses: ./.github/workflows/ci.yml

  # If tests are successful, we build the wheel and push it to the release
  build-wheel:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: |
          python -m pip install --upgrade build
          python -m build

      - uses: actions/upload-artifact@v4
        with:
          path: dist/muse*

      - uses: softprops/action-gh-release@v2
        with:
          files: dist/muse*

  # If building of the wheel is successful, then we try to publish it
  # First, in TestPyPI
  publish-TestPyPI:
    needs: build-wheel
    name: Publish MUSE to TestPyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Download sdist artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: dist

      - name: Display structure of downloaded files
        run: ls -R dist

      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  # And if all goes well, in PyPI
  publish-PyPI:
    needs: publish-TestPyPI
    name: Publish MUSE to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Download sdist artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: dist

      - name: Display structure of downloaded files
        run: ls -R dist

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  # Finally, if all of these went well, we build the standalone executable
  # And publish it to the release page, as well
  build-standalone:
    needs: publish-PyPI
    name: Build standalone executables
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ["3.9"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
          python -m pip install -e .[dev,gui]

      - name: Build directory-based standalone
        run: pyinstaller muse_dir.spec --distpath standalone

      - uses: actions/upload-artifact@v4
        with:
          path: standalone/MUSE*
          name: MUSE

      - uses: softprops/action-gh-release@v2
        with:
          files: standalone/MUSE*
